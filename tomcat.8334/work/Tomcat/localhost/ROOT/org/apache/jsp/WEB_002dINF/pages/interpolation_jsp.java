/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2017-01-06 10:34:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class interpolation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!doctype html>\n");
      out.write("<html>\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("    <title>Line Chart - Cubic interpolation mode</title>\n");
      out.write("    <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/Chart.bundle.js\"></script>\n");
      out.write("    <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/utils.js\"></script>\n");
      out.write("    <style>\n");
      out.write("    canvas{\n");
      out.write("        -moz-user-select: none;\n");
      out.write("        -webkit-user-select: none;\n");
      out.write("        -ms-user-select: none;\n");
      out.write("    }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("    <div style=\"width:75%;\">\n");
      out.write("        <canvas id=\"canvas\"></canvas>\n");
      out.write("    </div>\n");
      out.write("    <br>\n");
      out.write("    <br>\n");
      out.write("    <button id=\"randomizeData\">Randomize Data</button>\n");
      out.write("    <script>\n");
      out.write("\n");
      out.write("        var randomScalingFactor = function() {\n");
      out.write("            return Math.round(Math.random() * 100);\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        var datapoints = [0, 20, 20, 60, 60, 120, NaN, 180, 120, 125, 105, 110, 170];\n");
      out.write("\t\tvar config = {\n");
      out.write("            type: 'line',\n");
      out.write("            data: {\n");
      out.write("                labels: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\n");
      out.write("                datasets: [{\n");
      out.write("                    label: \"Cubic interpolation (monotone)\",\n");
      out.write("                    data: datapoints,\n");
      out.write("                    borderColor: window.chartColors.red,\n");
      out.write("\t\t\t\t\tbackgroundColor: 'rgba(0, 0, 0, 0)',\n");
      out.write("                    fill: false,\n");
      out.write("\t\t\t\t\tcubicInterpolationMode: 'monotone'\n");
      out.write("                }, {\n");
      out.write("                    label: \"Cubic interpolation (default)\",\n");
      out.write("                    data: datapoints,\n");
      out.write("                    borderColor: window.chartColors.blue,\n");
      out.write("\t\t\t\t\tbackgroundColor: 'rgba(0, 0, 0, 0)',\n");
      out.write("                    fill: false,\n");
      out.write("                }, {\n");
      out.write("                    label: \"Linear interpolation\",\n");
      out.write("                    data: datapoints,\n");
      out.write("                    borderColor: window.chartColors.green,\n");
      out.write("\t\t\t\t\tbackgroundColor: 'rgba(0, 0, 0, 0)',\n");
      out.write("                    fill: false,\n");
      out.write("\t\t\t\t\tlineTension: 0\n");
      out.write("                }]\n");
      out.write("            },\n");
      out.write("            options: {\n");
      out.write("                responsive: true,\n");
      out.write("                title:{\n");
      out.write("                    display:true,\n");
      out.write("                    text:'Chart.js Line Chart - Cubic interpolation mode'\n");
      out.write("                },\n");
      out.write("                tooltips: {\n");
      out.write("                    mode: 'index'\n");
      out.write("                },\n");
      out.write("                scales: {\n");
      out.write("                    xAxes: [{\n");
      out.write("                        display: true,\n");
      out.write("                        scaleLabel: {\n");
      out.write("                            display: true\n");
      out.write("                        }\n");
      out.write("                    }],\n");
      out.write("                    yAxes: [{\n");
      out.write("                        display: true,\n");
      out.write("                        scaleLabel: {\n");
      out.write("                            display: true,\n");
      out.write("                            labelString: 'Value'\n");
      out.write("                        },\n");
      out.write("                        ticks: {\n");
      out.write("                            suggestedMin: -10,\n");
      out.write("                            suggestedMax: 200,\n");
      out.write("                        }\n");
      out.write("                    }]\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        window.onload = function() {\n");
      out.write("            var ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n");
      out.write("            window.myLine = new Chart(ctx, config);\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        document.getElementById('randomizeData').addEventListener('click', function() {\n");
      out.write("\t\t\tfor (var i = 0, len = datapoints.length; i < len; ++i) {\n");
      out.write("\t\t\t\tdatapoints[i] = Math.random() < 0.05 ? NaN : randomScalingFactor();\n");
      out.write("\t\t\t}\n");
      out.write("            window.myLine.update();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
